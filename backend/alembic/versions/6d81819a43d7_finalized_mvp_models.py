"""Finalized MVP models

Revision ID: 6d81819a43d7
Revises: 6b6f280c9853
Create Date: 2025-08-15 22:16:49.778839

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6d81819a43d7'
down_revision: Union[str, Sequence[str], None] = '6b6f280c9853'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('token_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('balance_after', sa.Integer(), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('review_id', sa.Integer(), nullable=True),
    sa.Column('unlocked_item_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('amount != 0', name='check_amount_not_zero'),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], ),
    sa.ForeignKeyConstraint(['unlocked_item_id'], ['unlocked_items.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_token_trans_user_date', 'token_transactions', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_token_transactions_user_id'), 'token_transactions', ['user_id'], unique=False)
    op.add_column('albums', sa.Column('total_reviews', sa.Integer(), nullable=True))
    op.add_column('albums', sa.Column('average_rating', sa.NUMERIC(precision=3, scale=1), nullable=True))
    op.alter_column('albums', 'title',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('albums', 'spotify_album_id',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('albums', 'release_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('albums', 'label',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('albums', 'features',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.drop_index(op.f('ix_albums_features'), table_name='albums')
    op.add_column('artists', sa.Column('total_reviews', sa.Integer(), nullable=True))
    op.add_column('artists', sa.Column('average_rating', sa.NUMERIC(precision=3, scale=1), nullable=True))
    op.alter_column('artists', 'spotify_artist_id',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.add_column('reviews', sa.Column('song_id', sa.Integer(), nullable=True))
    op.add_column('reviews', sa.Column('album_id', sa.Integer(), nullable=True))
    op.add_column('reviews', sa.Column('artist_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('ix_reviews_item_id'), table_name='reviews')
    op.create_index('idx_review_album', 'reviews', ['album_id'], unique=False)
    op.create_index('idx_review_album_rating', 'reviews', ['album_id', 'rating'], unique=False)
    op.create_index('idx_review_artist', 'reviews', ['artist_id'], unique=False)
    op.create_index('idx_review_artist_rating', 'reviews', ['artist_id', 'rating'], unique=False)
    op.create_index('idx_review_rating', 'reviews', ['rating'], unique=False)
    op.create_index('idx_review_song', 'reviews', ['song_id'], unique=False)
    op.create_index('idx_review_song_rating', 'reviews', ['song_id', 'rating'], unique=False)
    op.create_index('idx_review_user_date', 'reviews', ['user_id', 'date_added'], unique=False)
    op.create_unique_constraint('unique_user_album_review', 'reviews', ['user_id', 'album_id'])
    op.create_unique_constraint('unique_user_artist_review', 'reviews', ['user_id', 'artist_id'])
    op.create_unique_constraint('unique_user_song_review', 'reviews', ['user_id', 'song_id'])
    op.drop_constraint(op.f('reviews_user_id_fkey'), 'reviews', type_='foreignkey')
    op.create_foreign_key(None, 'reviews', 'albums', ['album_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'reviews', 'artists', ['artist_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'reviews', 'songs', ['song_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'reviews', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('reviews', 'item_id')
    op.drop_column('reviews', 'item_type')
    op.add_column('songs', sa.Column('duration_ms', sa.Integer(), nullable=True))
    op.add_column('songs', sa.Column('total_reviews', sa.Integer(), nullable=True))
    op.add_column('songs', sa.Column('average_rating', sa.NUMERIC(precision=3, scale=1), nullable=True))
    op.alter_column('songs', 'spotify_id',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('songs', 'features',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.drop_index(op.f('ix_songs_features'), table_name='songs')
    op.create_index('idx_song_artist_album', 'songs', ['artist_id', 'album_id'], unique=False)
    op.create_index('idx_song_popularity', 'songs', ['popularity'], unique=False)
    op.add_column('unlocked_items', sa.Column('song_id', sa.Integer(), nullable=True))
    op.add_column('unlocked_items', sa.Column('album_id', sa.Integer(), nullable=True))
    op.add_column('unlocked_items', sa.Column('artist_id', sa.Integer(), nullable=True))
    op.add_column('unlocked_items', sa.Column('tokens_spent', sa.Integer(), nullable=False))
    op.alter_column('unlocked_items', 'unlocked_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_unlocked_items_item_id'), table_name='unlocked_items')
    op.drop_constraint(op.f('unique_user_item'), 'unlocked_items', type_='unique')
    op.create_index('idx_unlock_album', 'unlocked_items', ['album_id'], unique=False)
    op.create_index('idx_unlock_artist', 'unlocked_items', ['artist_id'], unique=False)
    op.create_index('idx_unlock_song', 'unlocked_items', ['song_id'], unique=False)
    op.create_unique_constraint('unique_user_album_unlock', 'unlocked_items', ['user_id', 'album_id'])
    op.create_unique_constraint('unique_user_artist_unlock', 'unlocked_items', ['user_id', 'artist_id'])
    op.create_unique_constraint('unique_user_song_unlock', 'unlocked_items', ['user_id', 'song_id'])
    op.drop_constraint(op.f('unlocked_items_user_id_fkey'), 'unlocked_items', type_='foreignkey')
    op.create_foreign_key(None, 'unlocked_items', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'unlocked_items', 'artists', ['artist_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'unlocked_items', 'albums', ['album_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'unlocked_items', 'songs', ['song_id'], ['id'], ondelete='CASCADE')
    op.drop_column('unlocked_items', 'item_id')
    op.drop_column('unlocked_items', 'item_type')
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=512),
               existing_nullable=False)
    op.alter_column('users', 'tokens',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'tokens',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=512),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('users', 'is_active')
    op.add_column('unlocked_items', sa.Column('item_type', postgresql.ENUM('SONG', 'ALBUM', 'ARTIST', name='reviewtype'), autoincrement=False, nullable=False))
    op.add_column('unlocked_items', sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'unlocked_items', type_='foreignkey')
    op.drop_constraint(None, 'unlocked_items', type_='foreignkey')
    op.drop_constraint(None, 'unlocked_items', type_='foreignkey')
    op.drop_constraint(None, 'unlocked_items', type_='foreignkey')
    op.create_foreign_key(op.f('unlocked_items_user_id_fkey'), 'unlocked_items', 'users', ['user_id'], ['id'])
    op.drop_constraint('unique_user_song_unlock', 'unlocked_items', type_='unique')
    op.drop_constraint('unique_user_artist_unlock', 'unlocked_items', type_='unique')
    op.drop_constraint('unique_user_album_unlock', 'unlocked_items', type_='unique')
    op.drop_index('idx_unlock_song', table_name='unlocked_items')
    op.drop_index('idx_unlock_artist', table_name='unlocked_items')
    op.drop_index('idx_unlock_album', table_name='unlocked_items')
    op.create_unique_constraint(op.f('unique_user_item'), 'unlocked_items', ['user_id', 'item_type', 'item_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_unlocked_items_item_id'), 'unlocked_items', ['item_id'], unique=False)
    op.alter_column('unlocked_items', 'unlocked_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('unlocked_items', 'tokens_spent')
    op.drop_column('unlocked_items', 'artist_id')
    op.drop_column('unlocked_items', 'album_id')
    op.drop_column('unlocked_items', 'song_id')
    op.drop_index('idx_song_popularity', table_name='songs')
    op.drop_index('idx_song_artist_album', table_name='songs')
    op.create_index(op.f('ix_songs_features'), 'songs', ['features'], unique=False)
    op.alter_column('songs', 'features',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
    op.alter_column('songs', 'spotify_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('songs', 'average_rating')
    op.drop_column('songs', 'total_reviews')
    op.drop_column('songs', 'duration_ms')
    op.add_column('reviews', sa.Column('item_type', postgresql.ENUM('SONG', 'ALBUM', 'ARTIST', name='reviewtype'), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key(op.f('reviews_user_id_fkey'), 'reviews', 'users', ['user_id'], ['id'])
    op.drop_constraint('unique_user_song_review', 'reviews', type_='unique')
    op.drop_constraint('unique_user_artist_review', 'reviews', type_='unique')
    op.drop_constraint('unique_user_album_review', 'reviews', type_='unique')
    op.drop_index('idx_review_user_date', table_name='reviews')
    op.drop_index('idx_review_song_rating', table_name='reviews')
    op.drop_index('idx_review_song', table_name='reviews')
    op.drop_index('idx_review_rating', table_name='reviews')
    op.drop_index('idx_review_artist_rating', table_name='reviews')
    op.drop_index('idx_review_artist', table_name='reviews')
    op.drop_index('idx_review_album_rating', table_name='reviews')
    op.drop_index('idx_review_album', table_name='reviews')
    op.create_index(op.f('ix_reviews_item_id'), 'reviews', ['item_id'], unique=False)
    op.drop_column('reviews', 'artist_id')
    op.drop_column('reviews', 'album_id')
    op.drop_column('reviews', 'song_id')
    op.alter_column('artists', 'spotify_artist_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('artists', 'average_rating')
    op.drop_column('artists', 'total_reviews')
    op.create_index(op.f('ix_albums_features'), 'albums', ['features'], unique=False)
    op.alter_column('albums', 'features',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
    op.alter_column('albums', 'label',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('albums', 'release_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('albums', 'spotify_album_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('albums', 'title',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_column('albums', 'average_rating')
    op.drop_column('albums', 'total_reviews')
    op.drop_index(op.f('ix_token_transactions_user_id'), table_name='token_transactions')
    op.drop_index('idx_token_trans_user_date', table_name='token_transactions')
    op.drop_table('token_transactions')
    # ### end Alembic commands ###
